const express = require('express')
const qs = require('qs')
const axios = require('axios')
const bodyParser = require('body-parser');
const app = express()

app.use(express.json())
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("./build"))

const client_id = process.env.CLIENT_ID
const client_secret = process.env.CLIENT_SECRET
const auth_token = Buffer.from(`${client_id}:${client_secret}`, 'utf-8').toString('base64');

app.get('/ping', (req, res) => {
    res.send('pong!')
})

app.get('/getToken', (req, res) => {
    const config = {
        headers: { 'Authorization': `Basic ${auth_token}` },
    }

    const data = qs.stringify({
        grant_type: 'client_credentials'
    })

    axios
        .post('https://accounts.spotify.com/api/token', data, config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.get('/token/getGenres', (req, res) => {
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
    }

    axios
        .get('https://api.spotify.com/v1/recommendations/available-genre-seeds', config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.get('/token/search', (req, res) => {
    console.log(req.query);
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
        params: {
            'q': req.query.query,
            'offset': req.body.offset || 0,
            'type': req.query.type,
            'limit': req.body.limit || 10,
            'market': 'US'
        }
    }

    axios
        .get('https://api.spotify.com/v1/search', config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.get('/token/recs', (req, res) => {
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
        params: {
            'seed_artists': req.body.seed_artists || "",
            'seed_genres': req.body.seed_genres || "",
            'seed_tracks': req.body.seed_tracks || "",
            'limit': req.body.limit || 10,
            'market': 'US'
        }
    }

    axios
        .get('https://api.spotify.com/v1/recommendations', config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.get('/userToken/getUser', (req, res) => {
    // Use a user token! Get using spotify authentication URI
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
    }

    axios
        .get('https://api.spotify.com/v1/me', config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.post('/userToken/makeplaylist', (req, res) => {
    // Use a user token! Get using spotify authentication URI
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
    }

    const data = qs.stringify({
        name: req.body.playlistName || "Generated playlist",
        description: "Generated by Music Rec",
        public: false
    })

    axios
        .post("https://api.spotify.com/v1/users/" + req.body.userid + "/playlists", data, config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})

app.post('/userToken/addtoplaylist', (req, res) => {
    // Use a user token! Get using spotify authentication URI
    const config = {
        headers: { 'Authorization': `Bearer ${req.headers.authorization}` },
    }

    const data = qs.stringify({
        uris: req.body.uris
    })

    axios
        .post("https://api.spotify.com/v1/playlists/" + req.body.playlistid + "/tracks", data, config)
        .then(data => res.json(data.data))
        .catch(err => res.json(err))
})


const PORT = process.env.PORT
app.listen(PORT, () => {
    console.log(`App running on port ${PORT}`);
})